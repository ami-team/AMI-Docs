{
  "namespaces":[
    {
      "name":"amiAuth",
      "alias":"amiLogin",
      "desc":"The AMI authentication subsystem",
      "implements":[

      ],
      "inherits":[

      ],
      "functions":[
        {
          "name":"getMqttEndpoint",
          "alias":"",
          "desc":"Gets the current MQTT endpoint",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current MQTT endpoint"
            }
          ]
        },
        {
          "name":"getMqttToken",
          "alias":"",
          "desc":"Gets the current MQTT token",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current MQTT token"
            }
          ]
        },
        {
          "name":"getUserInfo",
          "alias":"",
          "desc":"Gets the current user information",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The current user information"
            }
          ]
        },
        {
          "name":"getRoleInfo",
          "alias":"",
          "desc":"Gets the current role information",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The current role information"
            }
          ]
        },
        {
          "name":"getBookmarkInfo",
          "alias":"",
          "desc":"Gets the current bookmark information",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The current bookmark information"
            }
          ]
        },
        {
          "name":"getDashboardInfo",
          "alias":"",
          "desc":"Gets the current dashboard information",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The current dashboard information"
            }
          ]
        },
        {
          "name":"getAWFInfo",
          "alias":"",
          "desc":"Gets the current AMI Web Framework information",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The current AMI Web Framework information"
            }
          ]
        },
        {
          "name":"getUser",
          "alias":"",
          "desc":"Gets the current user",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current user"
            }
          ]
        },
        {
          "name":"getGuest",
          "alias":"",
          "desc":"Gets the current guest user",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current guest user"
            }
          ]
        },
        {
          "name":"getNotBeforeDate",
          "alias":"",
          "desc":"Gets the current user `not before` date",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current user `not before` date"
            }
          ]
        },
        {
          "name":"getNotAfterDate",
          "alias":"",
          "desc":"Gets the current user `not after` date",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current user `not after` date"
            }
          ]
        },
        {
          "name":"getClientDN",
          "alias":"",
          "desc":"Gets the current client DN",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current client DN"
            }
          ]
        },
        {
          "name":"getIssuerDN",
          "alias":"",
          "desc":"Gets the current issuer DN",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The current issuer DN"
            }
          ]
        },
        {
          "name":"isValid",
          "alias":"",
          "desc":"Checks whether the user is valid or not",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"isAuthenticated",
          "alias":"",
          "desc":"Checks whether the user is authenticated or not",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"hasRole",
          "alias":"",
          "desc":"Checks whether the user has the given role or not",
          "params":[
            {
              "name":"roleName",
              "type":[
                "string"
              ],
              "desc":"the role",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"update",
          "alias":"",
          "desc":"Update the user information",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"sso",
          "alias":"",
          "desc":"Opens the SSO popup window",
          "params":[

          ]
        },
        {
          "name":"signIn",
          "alias":"",
          "desc":"Signs in",
          "params":[

          ]
        },
        {
          "name":"signOut",
          "alias":"",
          "desc":"Signs out",
          "params":[

          ]
        },
        {
          "name":"changeInfo",
          "alias":"",
          "desc":"Opens the 'Change Info' modal window",
          "params":[

          ]
        },
        {
          "name":"changePass",
          "alias":"",
          "desc":"Opens the 'Change Password' modal window",
          "params":[

          ]
        },
        {
          "name":"changeCertificate",
          "alias":"",
          "desc":"Opens the 'Change Certificate' modal window",
          "params":[

          ]
        },
        {
          "name":"accountStatus",
          "alias":"",
          "desc":"Opens the 'Account Status' modal window",
          "params":[

          ]
        }
      ]
    },
    {
      "name":"amiCommand",
      "alias":"",
      "desc":"The AMI command subsystem",
      "implements":[

      ],
      "inherits":[

      ],
      "functions":[
        {
          "name":"initHttpClient",
          "alias":"",
          "desc":"Initializes the HTTP client",
          "params":[
            {
              "name":"endpoint",
              "type":[
                "string"
              ],
              "desc":"the HTTP endpoint",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"initMqttClient",
          "alias":"",
          "desc":"Initializes the MQTT client",
          "params":[
            {
              "name":"endpoint",
              "type":[
                "string"
              ],
              "desc":"the MQTT endpoint",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"getHttpEndpoint",
          "alias":"",
          "desc":"Gets the HTTP endpoint",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"getMqttEndpoint",
          "alias":"",
          "desc":"Gets the MQTT endpoint",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"execute",
          "alias":"",
          "desc":"Executes an AMI command",
          "params":[
            {
              "name":"command",
              "type":[
                "string"
              ],
              "desc":"the command",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (mqtt, endpoint, serverName, converter, extras, params, context, timeout)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"mqttSignInByToken",
          "alias":"",
          "desc":"Signs in by JWT token (MQTT client)",
          "params":[
            {
              "name":"token",
              "type":[
                "string"
              ],
              "desc":"the password",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"serverName",
              "type":[
                "string"
              ],
              "desc":"the server name",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"mqttSignOut",
          "alias":"",
          "desc":"Signs out (MQTT client)",
          "params":[
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"signInByToken",
          "alias":"",
          "desc":"Signs in by token (HTTP client)",
          "params":[
            {
              "name":"token",
              "type":[
                "string"
              ],
              "desc":"the token",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"signInByPassword",
          "alias":"",
          "desc":"Signs in by login/password (HTTP client)",
          "params":[
            {
              "name":"username",
              "type":[
                "string"
              ],
              "desc":"the username",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"password",
              "type":[
                "string"
              ],
              "desc":"the password",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"signInByCertificate",
          "alias":"",
          "desc":"Signs in by certificate (HTTP client)",
          "params":[
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"signOut",
          "alias":"",
          "desc":"Signs out (HTTP client)",
          "params":[
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"attachCertificate",
          "alias":"",
          "desc":"Attaches a certificate",
          "params":[
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"detachCertificate",
          "alias":"",
          "desc":"Detaches a certificate",
          "params":[
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"addUser",
          "alias":"",
          "desc":"Adds a new username",
          "params":[
            {
              "name":"username",
              "type":[
                "string"
              ],
              "desc":"the username",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"password",
              "type":[
                "string"
              ],
              "desc":"the password",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"firstName",
              "type":[
                "string"
              ],
              "desc":"the first name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"lastName",
              "type":[
                "string"
              ],
              "desc":"the last name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"email",
              "type":[
                "string"
              ],
              "desc":"the email",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"captchaHash",
              "type":[
                "string"
              ],
              "desc":"the captcha hash generated by AMI",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"captchaText",
              "type":[
                "string"
              ],
              "desc":"the captcha text entered by the username",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"attachCert",
              "type":[
                "boolean"
              ],
              "desc":"attach the current certificate",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"agree",
              "type":[
                "boolean"
              ],
              "desc":"agree with the terms and conditions",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"changeInfo",
          "alias":"",
          "desc":"Changes the account information",
          "params":[
            {
              "name":"firstName",
              "type":[
                "string"
              ],
              "desc":"the first name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"lastName",
              "type":[
                "string"
              ],
              "desc":"the last name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"email",
              "type":[
                "string"
              ],
              "desc":"the email",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"changePassword",
          "alias":"",
          "desc":"Changes the account password",
          "params":[
            {
              "name":"username",
              "type":[
                "string"
              ],
              "desc":"the username",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"oldPassword",
              "type":[
                "string"
              ],
              "desc":"the old password",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"newPassword",
              "type":[
                "string"
              ],
              "desc":"the new password",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"resetPassword",
          "alias":"",
          "desc":"Resets the account password",
          "params":[
            {
              "name":"username",
              "type":[
                "string"
              ],
              "desc":"the username",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"captchaHash",
              "type":[
                "string"
              ],
              "desc":"the captcha hash generated by AMI",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"captchaText",
              "type":[
                "string"
              ],
              "desc":"the captcha text entered by the username",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        }
      ]
    },
    {
      "name":"amiRouter",
      "alias":"",
      "desc":"The AMI url routing subsystem",
      "implements":[

      ],
      "inherits":[

      ],
      "functions":[
        {
          "name":"getWebAppURL",
          "alias":"",
          "desc":"Gets the webapp URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The webapp URL"
            }
          ]
        },
        {
          "name":"getWebAppArgs",
          "alias":"",
          "desc":"Gets the arguments of the webapp URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, string>"
              ],
              "desc":"The arguments of the webapp URL"
            }
          ]
        },
        {
          "name":"getWebAppHash",
          "alias":"",
          "desc":"Gets the anchor part of the webapp URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The anchor part of the webapp URL"
            }
          ]
        },
        {
          "name":"getScriptURL",
          "alias":"",
          "desc":"Gets the script URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The script URL"
            }
          ]
        },
        {
          "name":"getScriptArgs",
          "alias":"",
          "desc":"Gets the arguments of the script URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "Object.<string, string>"
              ],
              "desc":"The arguments of the the script URL"
            }
          ]
        },
        {
          "name":"getWebappHash",
          "alias":"",
          "desc":"Gets anchor part of the script URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The anchor part of the script URL"
            }
          ]
        },
        {
          "name":"getOriginURL",
          "alias":"",
          "desc":"Gets the origin URL",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The origin URL"
            }
          ]
        },
        {
          "name":"append",
          "alias":"",
          "desc":"Appends a routing rule",
          "params":[
            {
              "name":"regExp",
              "type":[
                "string"
              ],
              "desc":"the regExp",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"callback",
              "type":[
                "function"
              ],
              "desc":"the callback",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "AMIRouter"
              ],
              "desc":"The amiRouter singleton"
            }
          ]
        },
        {
          "name":"remove",
          "alias":"",
          "desc":"Removes a routing rule",
          "params":[
            {
              "name":"regExp",
              "type":[
                "string"
              ],
              "desc":"the regExp",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "AMIRouter"
              ],
              "desc":"The amiRouter singleton"
            }
          ]
        },
        {
          "name":"check",
          "alias":"",
          "desc":"Checks whether the URL matches with a routing rule",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"appendHistoryEntry",
          "alias":"",
          "desc":"Appends a new history entry",
          "params":[
            {
              "name":"path",
              "type":[
                "string"
              ],
              "desc":"the new path",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"context",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the new context",
              "default":null,
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"replaceHistoryEntry",
          "alias":"",
          "desc":"Replaces the current history entry",
          "params":[
            {
              "name":"path",
              "type":[
                "string"
              ],
              "desc":"the new path",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"context",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the new context",
              "default":null,
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        }
      ]
    },
    {
      "name":"amiWebApp",
      "alias":"",
      "desc":"The AMI webapp subsystem",
      "implements":[

      ],
      "inherits":[

      ],
      "variables":[
        {
          "name":"webAppURL",
          "alias":"",
          "type":[
            "string"
          ],
          "desc":"The webapp URL"
        },
        {
          "name":"scriptURL",
          "alias":"",
          "type":[
            "string"
          ],
          "desc":"The script URL"
        },
        {
          "name":"originURL",
          "alias":"",
          "type":[
            "string"
          ],
          "desc":"The origin URL"
        },
        {
          "name":"args",
          "alias":"",
          "type":[
            "Object.<string, string>"
          ],
          "desc":"The arguments of the webapp URL"
        },
        {
          "name":"hash",
          "alias":"",
          "type":[
            "string"
          ],
          "desc":"The anchor part of the webapp URL"
        },
        {
          "name":"bootstrapVersion",
          "alias":"",
          "type":[
            "number"
          ],
          "desc":"The Twitter Bootstrap's version (default, 4)"
        }
      ],
      "events":[
        {
          "name":"onReady",
          "alias":"",
          "desc":"This method must be overloaded and is called when the Web application starts",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ]
        },
        {
          "name":"onRefresh",
          "alias":"",
          "desc":"This method must be overloaded and is called when the toolbar needs to be updated",
          "params":[
            {
              "name":"isAuth",
              "type":[
                "boolean"
              ],
              "desc":"is the user authenticated",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        }
      ],
      "functions":[
        {
          "name":"start",
          "alias":"",
          "desc":"Starts the Web application",
          "params":[
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (logo_url, background_url, sign_in_image_url, home_url, contact_email, about_url, default_theme_url, dashboard_theme_url, locker_url, endpoint_url, sso_auto_authentication, sso_authentication_allowed, password_authentication_allowed, certificate_authentication_allowed, sign_out_allowed, create_account_allowed, change_info_allowed, change_password_allowed, change_certificate_allowed, captcha_allowed, bookmarks_allowed, dashboards_allowed)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "AMIWebApp"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"_internal_then",
          "alias":"",
          "desc":"",
          "params":[
            {
              "name":"deferred",
              "type":[
                "$.Deferred"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"doneCallback",
              "type":[
                "function"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"failCallback",
              "type":[
                "function"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"_internal_always",
          "alias":"",
          "desc":"",
          "params":[
            {
              "name":"deferred",
              "type":[
                "$.Deferred"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"alwaysCallback",
              "type":[
                "function"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"typeOf",
          "alias":"",
          "desc":"Gets the type name of the given object",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The type name of the given object"
            }
          ]
        },
        {
          "name":"asArray",
          "alias":"",
          "desc":"Turns the given object into an array if it is not already the case",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "Array.<*>"
              ],
              "desc":"The resulting array"
            }
          ]
        },
        {
          "name":"isString",
          "alias":"",
          "desc":"Checks whether the given object is a string",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"isArray",
          "alias":"",
          "desc":"Checks whether the given object is an array",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"isObject",
          "alias":"",
          "desc":"Checks whether the given object is an object",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"isSet",
          "alias":"",
          "desc":"Checks whether the given object is a set",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"isMap",
          "alias":"",
          "desc":"Checks whether the given object is a map",
          "params":[
            {
              "name":"x",
              "type":[
                "*"
              ],
              "desc":"the object",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"setup",
          "alias":"",
          "desc":"",
          "params":[
            {
              "name":"optionNames",
              "type":[
                "Array.<string>"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"optionDefaults",
              "type":[
                "Array.<*>"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "Array.<*>"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"lock",
          "alias":"",
          "desc":"Locks the Web application",
          "params":[

          ]
        },
        {
          "name":"unlock",
          "alias":"",
          "desc":"Unlocks the Web application",
          "params":[

          ]
        },
        {
          "name":"modalEnter",
          "alias":"",
          "desc":"Enter the modal window",
          "params":[

          ]
        },
        {
          "name":"modalLeave",
          "alias":"",
          "desc":"Leave the modal window",
          "params":[

          ]
        },
        {
          "name":"canLeave",
          "alias":"",
          "desc":"Specifies whether leaving the current page must be confirmed or not",
          "params":[
            {
              "name":"canLeave",
              "type":[

              ],
              "desc":"",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"error",
          "alias":"",
          "desc":"Shows an 'error' message",
          "params":[
            {
              "name":"message",
              "type":[
                "string",
                "Array.<string>"
              ],
              "desc":"the message",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"fadeOut",
              "type":[
                "boolean"
              ],
              "desc":"if True, the message disappears after 60s",
              "default":false,
              "optional":true,
              "nullable":""
            }
          ]
        },
        {
          "name":"info",
          "alias":"",
          "desc":"Shows an 'info' message",
          "params":[
            {
              "name":"message",
              "type":[
                "string",
                "Array.<string>"
              ],
              "desc":"the message",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"fadeOut",
              "type":[
                "boolean"
              ],
              "desc":"if True, the message disappears after 60s",
              "default":false,
              "optional":true,
              "nullable":""
            }
          ]
        },
        {
          "name":"success",
          "alias":"",
          "desc":"Shows a 'success' message",
          "params":[
            {
              "name":"message",
              "type":[
                "string",
                "Array.<string>"
              ],
              "desc":"the message",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"fadeOut",
              "type":[
                "boolean"
              ],
              "desc":"if True, the message disappears after 60s",
              "default":false,
              "optional":true,
              "nullable":""
            }
          ]
        },
        {
          "name":"warning",
          "alias":"",
          "desc":"Shows a 'warning' message",
          "params":[
            {
              "name":"message",
              "type":[
                "string",
                "Array.<string>"
              ],
              "desc":"the message",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"fadeOut",
              "type":[
                "boolean"
              ],
              "desc":"if True, the message disappears after 60s",
              "default":false,
              "optional":true,
              "nullable":""
            }
          ]
        },
        {
          "name":"flush",
          "alias":"",
          "desc":"Flushes messages",
          "params":[

          ]
        },
        {
          "name":"base64Encode",
          "alias":"",
          "desc":"Encodes the given string to base64",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the decoded string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The encoded string"
            }
          ]
        },
        {
          "name":"base64Decode",
          "alias":"",
          "desc":"Decodes the given string from base64",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the encoded string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The decoded string"
            }
          ]
        },
        {
          "name":"textToHtml",
          "alias":"",
          "desc":"Escapes the given string from text to HTML",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the unescaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The escaped string"
            }
          ]
        },
        {
          "name":"htmlToText",
          "alias":"",
          "desc":"Unescapes the given string from HTML to text",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the escaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The unescaped string"
            }
          ]
        },
        {
          "name":"textToString",
          "alias":"",
          "desc":"Escapes the given string from text to JavaScript string",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the unescaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The escaped string"
            }
          ]
        },
        {
          "name":"stringToText",
          "alias":"",
          "desc":"Unescapes the given string from JavaScript string to text",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the escaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The unescaped string"
            }
          ]
        },
        {
          "name":"htmlToString",
          "alias":"",
          "desc":"Escapes the given string from HTML to JavaScript string",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the unescaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The escaped string"
            }
          ]
        },
        {
          "name":"stringToHtml",
          "alias":"",
          "desc":"Unescapes the given string from JavaScript string to HTML",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the escaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The unescaped string"
            }
          ]
        },
        {
          "name":"textToSQL",
          "alias":"",
          "desc":"Escapes the given string from text to SQL",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the unescaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The escaped string"
            }
          ]
        },
        {
          "name":"sqlToText",
          "alias":"",
          "desc":"Unescapes the given string from SQL to text",
          "params":[
            {
              "name":"s",
              "type":[
                "string"
              ],
              "desc":"the escaped string",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The unescaped string"
            }
          ]
        },
        {
          "name":"fillBreadcrumb",
          "alias":"",
          "desc":"Fills the main breadcrumb",
          "params":[
            {
              "name":"items",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of HTML formatted items",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"replaceHTML",
          "alias":"",
          "desc":"Puts a HTML or TWIG fragment to the given target",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, scope, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "see":[
            "method [formatTWIG]{@link #jsdoc_method_formatTWIG}"
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"prependHTML",
          "alias":"",
          "desc":"Prepends a HTML or TWIG fragment to the given target",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, scope, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "see":[
            "method [formatTWIG]{@link #jsdoc_method_formatTWIG}"
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"appendHTML",
          "alias":"",
          "desc":"Appends a HTML or TWIG fragment to the given target",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, scope, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "see":[
            "method [formatTWIG]{@link #jsdoc_method_formatTWIG}"
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"parentHTML",
          "alias":"",
          "desc":"Puts a HTML or TWIG fragment to the given target",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, scope, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "see":[
            "method [formatTWIG]{@link #jsdoc_method_formatTWIG}"
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"formatTWIG",
          "alias":"",
          "desc":"Interprets the given TWIG string",
          "params":[
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG string",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"dict",
              "type":[
                "Object.<string, *>",
                "Array.<Object.<string, *>>"
              ],
              "desc":"the dictionary",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"twigs",
              "type":[
                "Object.<string, string>"
              ],
              "desc":"dictionary of fragments",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "see":[
            "{@link https://twig.symfony.com/doc/}"
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The Interpreted TWIG string"
            }
          ]
        },
        {
          "name":"renderJSDoc",
          "alias":"",
          "desc":"Renders a AMI JSDoc documentation",
          "params":[
            {
              "name":"menuSelector",
              "type":[
                "string"
              ],
              "desc":"selector of the menu div",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"bodySelector",
              "type":[
                "string"
              ],
              "desc":"selector of the body div",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"json",
              "type":[
                "object"
              ],
              "desc":"the JSON documentation",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "AMIJSDoc"
              ],
              "desc":""
            }
          ]
        },
        {
          "name":"loadResources",
          "alias":"",
          "desc":"Asynchronously loads resources by file extension",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadSheets",
          "alias":"",
          "desc":"Asynchronously loads CSS sheets",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadScripts",
          "alias":"",
          "desc":"Asynchronously loads JS scripts",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadJSONs",
          "alias":"",
          "desc":"Asynchronously loads JSON files",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadXMLs",
          "alias":"",
          "desc":"Asynchronously loads XML files",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadHTMLs",
          "alias":"",
          "desc":"Asynchronously loads HTML files",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadTWIGs",
          "alias":"",
          "desc":"Asynchronously loads TWIG files",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadTexts",
          "alias":"",
          "desc":"Asynchronously loads text files",
          "params":[
            {
              "name":"urls",
              "type":[
                "Array.<string>",
                "string"
              ],
              "desc":"the array of urls",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadSubApp",
          "alias":"",
          "desc":"Asynchronously loads a subapp",
          "params":[
            {
              "name":"subapp",
              "type":[
                "string"
              ],
              "desc":"the subapp name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":true,
              "nullable":true
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadSubAppByURL",
          "alias":"",
          "desc":"Asynchronously loads a subapp by URL",
          "params":[
            {
              "name":"defaultSubApp",
              "type":[
                "string"
              ],
              "desc":"if 'amiRouter.getArgs()[\"subapp\"]' is null, the default subapp name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"defaultUserData",
              "type":[
                "*"
              ],
              "desc":"if 'amiRouter.getArgs()[\"userdata\"]' is null, the default user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"loadControl",
          "alias":"",
          "desc":"Asynchronously loads a control",
          "params":[
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControl",
          "alias":"",
          "desc":"Asynchronously creates a control",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"owner",
              "type":[
                "*"
              ],
              "desc":"the owner entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"params",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlInBody",
          "alias":"",
          "desc":"Asynchronously creates a control in the body",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"owner",
              "type":[
                "*"
              ],
              "desc":"the owner entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlParams",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's render method mandatory parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the control's render method optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"ownerOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the owner's optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlInContainer",
          "alias":"",
          "desc":"Asynchronously creates a control in a container",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"owner",
              "type":[
                "*"
              ],
              "desc":"the owner entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlParams",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's render method mandatory parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the control's render method optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"ownerOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the owner's optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"icon",
              "type":[
                "string"
              ],
              "desc":"the icon",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"title",
              "type":[
                "string"
              ],
              "desc":"the title",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlFromWebLink",
          "alias":"",
          "desc":"Asynchronously creates a control in a container from a WEB link",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"owner",
              "type":[
                "*"
              ],
              "desc":"the owner entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"el",
              "type":[
                "Element"
              ],
              "desc":"the HTML element",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"ownerOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the owner's optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        }
      ]
    }
  ],
  "interfaces":[
    {
      "name":"ami.IControl",
      "alias":"",
      "desc":"The AMI control interface",
      "implements":[

      ],
      "inherits":[

      ],
      "functions":[
        {
          "name":"onReady",
          "alias":"",
          "desc":"Called when the control is ready to run",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onRemove",
          "alias":"",
          "desc":"Called when the control is removed",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"patchId",
          "alias":"",
          "desc":"Patches an HTML identifier",
          "params":[
            {
              "name":"id",
              "type":[
                "string"
              ],
              "desc":"the not patched HTML identifier",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The patched HTML identifier"
            }
          ]
        },
        {
          "name":"replaceHTML",
          "alias":"",
          "desc":"Puts a HTML or TWIG fragment to the given target, see method [formatTWIG]{@link #jsdoc_method_formatTWIG}",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"prependHTML",
          "alias":"",
          "desc":"Prepends a HTML or TWIG fragment to the given target, see method [formatTWIG]{@link #jsdoc_method_formatTWIG}",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"appendHTML",
          "alias":"",
          "desc":"Appends a HTML or TWIG fragment to the given target, see method [formatTWIG]{@link #jsdoc_method_formatTWIG}",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        }
      ]
    },
    {
      "name":"ami.IContainer",
      "alias":"",
      "desc":"The AMI container interface",
      "implements":[

      ],
      "inherits":[

      ],
      "functions":[
        {
          "name":"render",
          "alias":"",
          "desc":"",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (...)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"prependItem",
          "alias":"",
          "desc":"Prepends an item",
          "params":[
            {
              "name":"title",
              "type":[
                "string"
              ],
              "desc":"the title",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (...)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object returning the new item's identifier"
            }
          ]
        },
        {
          "name":"appendItem",
          "alias":"",
          "desc":"Appends an item",
          "params":[
            {
              "name":"title",
              "type":[
                "string"
              ],
              "desc":"the title",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (...)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object returning the new item's identifier"
            }
          ]
        },
        {
          "name":"removeItem",
          "alias":"",
          "desc":"Removes an item",
          "params":[
            {
              "name":"itemId",
              "type":[
                "string"
              ],
              "desc":"the item identifier",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ]
        },
        {
          "name":"removeAllItems",
          "alias":"",
          "desc":"Removes all items",
          "params":[

          ]
        },
        {
          "name":"isEmpty",
          "alias":"",
          "desc":"Checks whether the container is empty or not",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "boolean"
              ],
              "desc":""
            }
          ]
        }
      ]
    },
    {
      "name":"ami.ISubApp",
      "alias":"",
      "desc":"The AMI sub-application interface",
      "implements":[

      ],
      "inherits":[

      ],
      "functions":[
        {
          "name":"onReady",
          "alias":"",
          "desc":"Called when the sub-application is ready to run",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onExit",
          "alias":"",
          "desc":"Called when the sub-application is about to exit",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onLogin",
          "alias":"",
          "desc":"Called when logging in",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onLogout",
          "alias":"",
          "desc":"Called when logging out",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        }
      ]
    }
  ],
  "classes":[
    {
      "name":"ami.Control",
      "alias":"",
      "desc":"The basic AMI control",
      "implements":[
        "ami.IControl"
      ],
      "inherits":[

      ],
      "konstructor":{
        "name":"Control",
        "params":[
          {
            "name":"parent",
            "type":[
              "*"
            ],
            "desc":"the parent entity",
            "optional":"",
            "nullable":true
          },
          {
            "name":"owner",
            "type":[
              "*"
            ],
            "desc":"the owner entity",
            "optional":"",
            "nullable":true
          }
        ]
      },
      "functions":[
        {
          "name":"onReady",
          "alias":"",
          "desc":"Called when the control is ready to run",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onRemove",
          "alias":"",
          "desc":"Called when the control is removed",
          "params":[

          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"patchId",
          "alias":"",
          "desc":"Patches an HTML identifier",
          "params":[
            {
              "name":"id",
              "type":[
                "string"
              ],
              "desc":"the not patched HTML identifier",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "string"
              ],
              "desc":"The patched HTML identifier"
            }
          ]
        },
        {
          "name":"replaceHTML",
          "alias":"",
          "desc":"Puts a HTML or TWIG fragment to the given target, see method [formatTWIG]{@link #jsdoc_method_formatTWIG}",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"prependHTML",
          "alias":"",
          "desc":"Prepends a HTML or TWIG fragment to the given target, see method [formatTWIG]{@link #jsdoc_method_formatTWIG}",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"appendHTML",
          "alias":"",
          "desc":"Appends a HTML or TWIG fragment to the given target, see method [formatTWIG]{@link #jsdoc_method_formatTWIG}",
          "params":[
            {
              "name":"selector",
              "type":[
                "string"
              ],
              "desc":"the target selector",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"twig",
              "type":[
                "string"
              ],
              "desc":"the TWIG fragment",
              "default":"{}",
              "optional":true,
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, dict, twigs)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"setupCtx",
          "alias":"",
          "desc":"Sets up the control's context",
          "params":[
            {
              "name":"immutables",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of immutable parameters in the control's context",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"defaults",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of default values for optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of values for optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The resulting control's context"
            }
          ]
        },
        {
          "name":"createControl",
          "alias":"",
          "desc":"Asynchronously creates a control",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"params",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlInBody",
          "alias":"",
          "desc":"Asynchronously creates a control in the body",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlParams",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's render method mandatory parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the control's render method optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlInContainer",
          "alias":"",
          "desc":"Asynchronously creates a control in a container",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlParams",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's render method mandatory parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the control's render method optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"icon",
              "type":[
                "string"
              ],
              "desc":"the icon",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"title",
              "type":[
                "string"
              ],
              "desc":"the title",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlFromWebLink",
          "alias":"",
          "desc":"Asynchronously creates a control in a container from a WEB link",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"el",
              "type":[
                "Element"
              ],
              "desc":"the HTML element",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        }
      ]
    },
    {
      "name":"ami.SubApp",
      "alias":"",
      "desc":"The basic AMI sub-application",
      "implements":[
        "ami.ISubApp"
      ],
      "inherits":[

      ],
      "konstructor":{
        "name":"SubApp",
        "params":[

        ]
      },
      "functions":[
        {
          "name":"onReady",
          "alias":"",
          "desc":"Called when the sub-application is ready to run",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onExit",
          "alias":"",
          "desc":"Called when the sub-application is about to exit",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onLogin",
          "alias":"",
          "desc":"Called when logging in",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"onLogout",
          "alias":"",
          "desc":"Called when logging out",
          "params":[
            {
              "name":"userdata",
              "type":[
                "*"
              ],
              "desc":"the user data",
              "default":"",
              "optional":"",
              "nullable":true
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise",
                "$.Deferred",
                "undefined"
              ],
              "desc":"A JQuery promise object, deferred object or nothing"
            }
          ]
        },
        {
          "name":"setupCtx",
          "alias":"",
          "desc":"Sets up the application's context",
          "params":[
            {
              "name":"immutables",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of immutable parameters in the application's context",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"defaults",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of default values for optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of values for optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "Object.<string, *>"
              ],
              "desc":"The resulting application's context"
            }
          ]
        },
        {
          "name":"createControl",
          "alias":"",
          "desc":"Asynchronously creates a control",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"params",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlInBody",
          "alias":"",
          "desc":"Asynchronously creates a control in the body",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlParams",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's render method mandatory parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the control's render method optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlInContainer",
          "alias":"",
          "desc":"Asynchronously creates a control in a container",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"control",
              "type":[
                "string"
              ],
              "desc":"the control name",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlParams",
              "type":[
                "Array.<*>"
              ],
              "desc":"the control's render method mandatory parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"controlOptions",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"the control's render method optional parameters",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"icon",
              "type":[
                "string"
              ],
              "desc":"the icon",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"title",
              "type":[
                "string"
              ],
              "desc":"the title",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        },
        {
          "name":"createControlFromWebLink",
          "alias":"",
          "desc":"Asynchronously creates a control in a container from a WEB link",
          "params":[
            {
              "name":"parent",
              "type":[
                "*"
              ],
              "desc":"the parent entity",
              "default":"",
              "optional":"",
              "nullable":true
            },
            {
              "name":"el",
              "type":[
                "Element"
              ],
              "desc":"the HTML element",
              "default":"",
              "optional":"",
              "nullable":""
            },
            {
              "name":"options",
              "type":[
                "Object.<string, *>"
              ],
              "desc":"dictionary of optional parameters (context, cache)",
              "default":"{}",
              "optional":true,
              "nullable":""
            }
          ],
          "returns":[
            {
              "type":[
                "$.Promise"
              ],
              "desc":"A JQuery promise object"
            }
          ]
        }
      ]
    }
  ],
  "functions":[
    {
      "name":"$AMINamespace",
      "alias":"",
      "desc":"Creates a new namespace",
      "params":[
        {
          "name":"$name",
          "type":[
            "string"
          ],
          "desc":"the namespace name",
          "default":"",
          "optional":"",
          "nullable":""
        },
        {
          "name":"$descr",
          "type":[
            "Object.<string, *>"
          ],
          "desc":"the namespace body",
          "default":"{}",
          "optional":true,
          "nullable":""
        }
      ]
    },
    {
      "name":"$AMIInterface",
      "alias":"",
      "desc":"Creates a new interface",
      "params":[
        {
          "name":"$name",
          "type":[
            "string"
          ],
          "desc":"the interface name",
          "default":"",
          "optional":"",
          "nullable":""
        },
        {
          "name":"$descr",
          "type":[
            "Object.<string, *>"
          ],
          "desc":"the interface body",
          "default":"{}",
          "optional":true,
          "nullable":""
        }
      ]
    },
    {
      "name":"$AMIClass",
      "alias":"",
      "desc":"Creates a new class",
      "params":[
        {
          "name":"$name",
          "type":[
            "string"
          ],
          "desc":"the class name",
          "default":"",
          "optional":"",
          "nullable":""
        },
        {
          "name":"$descr",
          "type":[
            "Object.<string, *>"
          ],
          "desc":"the class body",
          "default":"{}",
          "optional":true,
          "nullable":""
        }
      ]
    }
  ]
}